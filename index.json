[
{
	"uri": "/hackthebox/boxes/",
	"title": "Boxes",
	"tags": [],
	"description": "",
	"content": "Boxes\n"
},
{
	"uri": "/hackthebox/challenges/challenges/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hackthebox/challenges/",
	"title": "Challenges",
	"tags": [],
	"description": "",
	"content": "Challenges\n"
},
{
	"uri": "/_header/",
	"title": "ChickenPwny",
	"tags": [],
	"description": "",
	"content": " ChickenPwny "
},
{
	"uri": "/concepts/",
	"title": "Concept",
	"tags": [],
	"description": "",
	"content": "Concept\n"
},
{
	"uri": "/",
	"title": "DocDock Documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hackthebox/",
	"title": "HackTheBox",
	"tags": [],
	"description": "",
	"content": "HackTheBox\n"
},
{
	"uri": "/concepts/webapppentest/osinjcmd/",
	"title": "OS Command Injection",
	"tags": [],
	"description": "",
	"content": "No, probably not what your thinking. I’m talking about web app pen-testing. A lot of programming languages are vulnerable, to command injection via webpage. The user supplies OS commands that are escaped and executed. This is due to not properly sanitizing user input or elements aren’t hard coded allowing for exploitation. Below are the characters to sanitize.\n| \u0026amp;\u0026amp; … ; `(tilda) \u0026gt; \u0026lt; \\ !  This vulnerability can occur by using as owsp puts it Dangerous API, or using system commands inside a script that handles users supplied input.\nPHP system exec eval shell_exec ASP.NET HttpRequest.Params HttpRequest.Url HttpRequest.Item EXAMPLES hackthebox.eu/index.php?exec=ls index.php?shell_exec=c3ViMmlw;ls index.php?shell_exec=c3ViMmlw||ls POST request tester=c3ViMmlw|ls tester=c3ViMmlw||ls tester=c3ViMmlw;ls tester2=c3ViMmlw\u0026amp;\u0026amp;ls \u0026lt; -- in some scenario you'll need to encode theses values  FOR MORE INFORMATION PLEASE FOLLOW THESES LINKS\nhttps://null-byte.wonderhowto.com/how-to/use-command-injection-pop-reverse-shell-web-server-0185760/\nTesting for Command Injection (OTG-INPVAL-013) - OWASP *OS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user…*www.owasp.org\nhttps://www.owasp.org/index.php/Command_Injection\n"
},
{
	"uri": "/concepts/webapppentest/phptypejuggling/",
	"title": "PHP Typw Juggling",
	"tags": [],
	"description": "",
	"content": "PHP Type Juggling\nThis article will cover PHP type juggling, and some different ways i have encountered it on hackthebox .\nPHP has two comparisons; loose (==, =!) and strict (===). Strict comparison 1 = 1, but in loose 1 could mean many things 1 could equal true or 1. Meaning that there multiple meaning for the values used. This is a built in feature for PHP to force type conversion into specific data type.\nPHP loose comparison does this to accommodate different data types for example; ‘9’ is different from 9. Adding the two data types in PHP will result in 18. In other languages like python will not accommodate such errors. PHP does this so the program might run as it was expected to. Accommodating human errors. Below are some examples of loose comparison.\n'0e1234' == '0e4321' '0e1234' == '0' '0e1234' \u0026lt;= '1' '0xf' == '15' #0xf in hexadecimal notation is 15  when php compares a string to a interger it has some weird quirks.\n'000...000' == int(0) '0e0...000' == int(0) '1e0...000' == int(1) 'abc...000' == int(0) # if a string starts with a non numerical character it will default to int(0)  Another example is when PHP try’s to interpreter a string and its converted into PHP exponential notation 0e⁰²³⁴²⁶²³⁴²²⁴¹²⁵¹⁶⁷⁸⁹ 0e²³⁴²⁶²³⁴²²⁴¹²⁵¹⁶⁷⁸⁹ equates to int(0) as well. If the number after the first letter is 0 it will remove the leading zero.\nIn the above examples the entire string is converted into a numerical value, or something completely different. Confusing I know but here are some popular charts that show how loose comparison works.\nThe Encounters\nphpsession, cookies, \u0026amp; passwords are susceptible to PHP type juggling. Allowing the attacker to take advantage of a PHP feature to gain access to valid user accounts. From what I have read, the attacker randomly generates cookies. Trying to predict the next cookie. The more random(entropy) the targets cookies have, the harder it is to preform this attack.\nIn the below example, PHP will convert both of the md5 hashes into integers. It will then compare the two values based on the integer. Even though the two hash are different they are both treated as value.\nsubmited cookie aa6fw…34tj4343 = 0 stored cookie ff6dj..w221.5885m = 0  This is also applicable to PHP authentication\nstored password e0rj238r submited password e0mfwewl  References:\nhttps://pen-testing.sans.org/blog/2014/12/18/php-weak-typing-woes-with-some-pontification-about-code-and-pen-testing https://0xdf.gitlab.io/2018/06/23/htb-falafel.html#php-type-juggling-intro https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf https://hydrasky.com/network-security/php-string-comparison-vulnerabilities/ https://www.whitehatsec.com/blog/magic-hashes/  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Tools\n"
},
{
	"uri": "/hackthebox/boxes/valentine/",
	"title": "Valentine",
	"tags": [],
	"description": "",
	"content": "I lost my original notes. VM corrupted.\nPHASE 1 — NMAP\nnmap -sC -sV -Pn -oA initial 10.10.10.79\nDidn’t return anything of significance. https is odd for a hackthebox challenge. Port 22 could be the initial foothold. Google apache 2.2.22 https vulns nothing crazy pops out.\nPHASE 2 — GOBUSTER /wpscan\ngobuster -u http://10.10.10.79 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-mediuml.txt -t 50\nreturn vulnerable to OpenSSL hearbleed\nPHASE 3 Manual investigation of the webpage\nThe big give away. A heart bleeding, hmm.\nBELIEVE THE HYPE. It’s also a hint to the exploit.\nPHASE 4\nWpscan returned Heartbleed vulnerability.\nYou may also run the exploit through Metasploit.\nBuahahahahaha, we have the ssh RSA key. Truly we are master of the universe.\nwithout Metasploit\nSome crap, the server leaked.\nPHASE 6 SSH\nI wasn’t sure what the username was it took a few tries to figure out its hype :P.\n"
},
{
	"uri": "/hackthebox/boxes/waldo/",
	"title": "Waldo",
	"tags": [],
	"description": "",
	"content": "WALDO\nInstead of giving binaries system-wide permissions, give them the permissions they need to do the job.\nSkipping past Nmap, after messing around with the request’s found three request fileWrite, dirRead, fileRead. FileWrite writes user-supplied input to list1. dirRead will enumerate directories and print out the content. fileRead needs the exact file path to work.\nSqlmap, Wfuzz didn’t work I had more success with wfuzz but I couldn’t filter the output. Nothing I tried allowed me to escape the current directory. Examining what’s available the PHP source code that’s running the website. The PHP script appears to call a bunch of functions from the PHP library =D. REQUEST_METHOD determines whether the request was a post or a get === strict comparison to POST request. the first few parts of the stript involve telling the browser what kind of data to expect Content-Type. “str_replace — Replace all occurrences of the search string with the replacement string” str_replace takes every occurrence of the the subject and replaces those values with replace. Mixed str_replace ( mixed $search , mixed\nIt finds ../ or ..\\” it will replace them with nothing the two quotes in replace represent nothing. the next part say if file name === (strict) user.txt print false(no user.txt) . /n/t/t, /n newline /tab /tab json_encode($filecontent) is taking the var file content and encoding the output(that will matter later) taking all this into consideration the script only checks for ../ or ..\\ anything else it find’s, it’ll ignore. I tried encoding these in every possible way. Then I was reading about LFI and saw it ….// yes the holy grail. ….//….//….// escaped out and allowed for directory traversal.\nI didn’t see .ssh at first because I’ve seen it before. when trying to view .ssh with fileRead it spat out is a directory noticed the output with request differs from .ash_history. bash_history produces false .ssh produced a file. Plug that into fileRead. Then you should find ssh private key!!! the format all fudged. using vim repeat I was able to clean up the file. when editing the file \\n is not a null character, it means newline in JSON. need to also get rid of “\\” this part was also tricky because of these two ports 9000 8888 rabbit holes. Netstat -antp after looking at it for a while noticed some of the ssh connection came from local address rcf-1904 address from localhost weird. That was the next big hint. Since the .monitor file is local now it’ll make it easier to use. the next username is monitor. Next were cast into a restricted environment (jail) to get out of this use the -t switch in ssh -t (bash — noprofile). Lots of rabbit holes \u0026amp; some useless tools.\nssh monitor@waldo -i .monitor -t \u0026quot;bash --noprofile\u0026quot;  PERMISSIONS\n-rwSr--r-- 1 root root first s is the suid bit the capital S denotes the file isn't executable. -rwsr-sr-x 1 root root first s is the suid bit second is the guid bit sticky bit the file gets its permissions from the parent directory  The for mentioned permissions are system-wide can have unintended effects that can often lead to getting root access in one way or another. If the binaries only need to read files with root permissions. Theirs this thing called capabilities. where the file is given limited permission as root. There is a whole a lot of different ones to choose from the one we’re interested in is.\n/usr/bin/tac = cap_dac_read_search  Allows the binary to read files as root. It took a while to find the tools full path getcap basically the find command for Linux capabilities.\n/sbin/getcap -r / 2\u0026gt;/dev/null. If you don’t run it with dev/null it’ll kind of lead you to the .monitor script but we want tac. tac just cat but in reverse lol. cat /root/root.txt  Conclusion\nInstead of giving binaries system-wide permissions, give them the permissions they need to do the job.\n"
},
{
	"uri": "/concepts/webapppentest/",
	"title": "WebAppPenTests",
	"tags": [],
	"description": "",
	"content": ""
}]