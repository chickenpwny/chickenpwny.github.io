<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebApps on Pwny_Sec</title>
    <link>/webapp/</link>
    <description>Recent content in WebApps on Pwny_Sec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/webapp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/webapp/exploiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/exploiting/</guid>
      <description>So I&amp;rsquo;m going to try and do a better job here than the first one. Here we will cover attacking the different web applications. First will explore bypassing user authenication by the front end. the back end will assume all request are valid. this is fix in version two of HTTP.
by submitting this request twice. were able to get
POST / HTTP/1.1 Host: ac1d1f671e4a193c810c2562008000fd.web-security-academy.net User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.</description>
    </item>
    
    <item>
      <title>GoBuster</title>
      <link>/webapp/gobuster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/gobuster/</guid>
      <description>What is Gobuster? Gobuster is a web application fuzzer designed to enumerate Web Directories and Domains
Gobuster has been recently updated, it has some new features and they changed it everything around. It&amp;rsquo;s still the gobuster we Love but its different now it went though some changes. I&amp;rsquo;m not sure if the kali repo has updated yet, you may need to download gobuster form the github repo.
Example&amp;rsquo;s For DIR:</description>
    </item>
    
    <item>
      <title>HTTP SMUGGLING</title>
      <link>/webapp/http-smuggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/http-smuggling/</guid>
      <description>HTTP Smuggling is an old attack, what&amp;rsquo;s new is that it&amp;rsquo;s still around. This is due to complex nature of modern day Web Applications. This will be me just going over documentation how to execute this attack, the implications, how to resolve it.
This is an old attack made popular by
https://portswigger.net/web-security/request-smuggling
Some server support transfer-encoding headers which, breaks up request. There are ways to confuse the front end of a website because of the very nature of the environment.</description>
    </item>
    
    <item>
      <title>Hydra</title>
      <link>/webapp/hydra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/hydra/</guid>
      <description>Hydra is a WebApp Brutefocer. suupply it with the required information and it will enumrate logins based on customer login word list of you could use rock you.
Hydra v8.8 &amp;copy; 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.
 Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PO RT] [-x MIN:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [service://server[:PORT][/OPT]] Options: -R restore a previous aborted/crashed session -I ignore an existing restore file (don&#39;t wait 10 seconds) -S perform an SSL connect -s PORT if the service is on a different default port, define it here -l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE -p PASS or -P FILE try password PASS, or load several passwords from FILE -x MIN:MAX:CHARSET password bruteforce generation, type &amp;quot;-x -h&amp;quot; to get help -y disable use of symbols in bruteforce, see above -e nsr try &amp;quot;n&amp;quot; null password, &amp;quot;s&amp;quot; login as pass and/or &amp;quot;r&amp;quot; reversed login -u loop around users, not passwords (effective!</description>
    </item>
    
    <item>
      <title>SqlMap</title>
      <link>/webapp/sqlmap/sqlmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/sqlmap/sqlmap/</guid>
      <description>SqlMap automates finding sql-injection it can use GET or POST request. It&amp;rsquo;s pretty neat.
In burp right click select copy to file, this will test for sql injection. pretty cool wasn&amp;rsquo;t aware it would test all the parameters. sqlmap &amp;ndash;batch -r login.req
sqlmap --batch -u &amp;quot;http://os.htb/users/admin*&amp;quot; --level 5 --risk 3 -u url also for get request --batch run default yes --* = the parameter to fuzz --dump , --dump-all dumping sqldb to a localfile in /  </description>
    </item>
    
    <item>
      <title>USER INPUT OF DOOM</title>
      <link>/webapp/user-inputt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/webapp/user-inputt/</guid>
      <description>Bypassing WAFS, and other mechanism, using &amp;ldquo;Web Application hackers handbook&amp;rdquo; as my guide. We&amp;rsquo;ll break this into six sections broken authentications, broken access controls, sql injection, cross site scripting, information leakage, cross-site request forgery.
I&amp;rsquo;ve heard good things about this book and figured doing a small writeup on it might be a fun experience.
Bypassing BlackList - Sometimes the blacklist is literal this means it will look for SELECT, and any other iteration of select will be ignored like SelEcT.</description>
    </item>
    
  </channel>
</rss>